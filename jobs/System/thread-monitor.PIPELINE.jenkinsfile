pipeline {
    agent any
    stages {
        stage('main') {
            steps {
                echo D.runtime.query(D.query.blockingTree().showStackTraces()).toString()
                writeFile file: 'jstack.log', text: D.runtime.toString()

                sh('''
                    rm -f dumpling.jar # Pick up updates
                    wget --no-check-certificate https://bit.ly/dumpling-sh -O dumpling.sh
                    chmod +x dumpling.sh

                    groovy_query="./dumpling.sh groovy --in threaddump:jstack.log"

                    mkdir -p reports

                    $groovy_query <<< "runtime.threads.size()" || true

                    query="runtime.threads.grep{it.name.startsWith('Handling ')}.query(new BlockingTree().showStackTraces())"
                    $groovy_query <<< $query > reports/blocking-tree.txt

                    query="runtime.threads.grep{it.name.startsWith('Handling ')}.query(new Deadlocks().showStackTraces())"
                    $groovy_query <<< $query > reports/deadlocks.txt

                    query="runtime.threads.grep{it.name.startsWith('Handling ')}.query(new TopContenders().showStackTraces())"
                    $groovy_query <<< $query > reports/top-contenders.txt
                ''')

                archiveArtifacts(artifacts: 'reports/*')
            }
        }
    }
}
